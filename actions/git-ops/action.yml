name: Generate a new GitOps release.
description: "Runs git_ops and attempts to generate a new release"
outputs:
  app-name:
    description: "The OTP app name"
    value: ${{ steps.original-app-info.outputs.app_name }}
  initial-version:
    description: "The app version before git_ops was run"
    value: ${{ steps.original-app-info.outputs.app_version }}
  final-version:
    description: "The app version after git_ops was run"
    value: ${{ steps.new-app-info.outputs.app_version || steps.original-app-info.outputs.app_version }}
inputs:
  working-directory:
    description: "Change the working directory that the commands are run within"
    required: false
    default: "${{ github.workspace }}"
  version-tag-prefix:
    description: "The prefix to place before the version number in the tag name"
    required: false
    default: "v"
  mix-env:
    description: "The Mix environment to compile within"
    required: false
    default: "dev"
runs:
  using: "composite"
  steps:
    - run: git config user.email '${{ github.repository }}+github-actions[bot]@users.noreply.github.com'
      shell: bash
      working-directory: "${{ inputs.working-directory }}"
    - run: git config user.name 'github-actions'
      shell: bash
      working-directory: "${{ inputs.working-directory }}"
    - run: mix git_ops.project_info --format github-actions
      env:
        MIX_ENV: ${{ inputs.mix-env }}
      name: Retrieving original app version.
      id: original-app-info
      shell: bash
      working-directory: "${{ inputs.working-directory }}"
    - run: mix git_ops.release --yes || true
      env:
        MIX_ENV: ${{ inputs.mix-env }}
      shell: bash
      working-directory: "${{ inputs.working-directory }}"
    - run: mix git_ops.project_info --format github-actions
      env:
        MIX_ENV: ${{ inputs.mix-env }}
      name: Checking for new app version.
      id: new-app-info
      shell: bash
      working-directory: "${{ inputs.working-directory }}"
    - name: Pushing new tag
      if: ${{ steps.original-app-info.outputs.app_version != steps.new-app-info.outputs.app_version }}
      run: git push "https://${{ github.actor }}:${{ github.token }}@github.com/${{ github.repository }}" HEAD:${{ github.ref }} refs/tags/v${{ steps.new-app-info.outputs.app_version }}
      shell: bash
      working-directory: "${{ inputs.working-directory }}"
    - name: Creating new Github release
      if: ${{ steps.original-app-info.outputs.app_version != steps.new-app-info.outputs.app_version }}
      id: create-release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        tag_name: ${{ inputs.version-tag-prefix }}${{ steps.new-app-info.outputs.app_version }}
        release_name: Release ${{ steps.new-app-info.outputs.app_name }} ${{ steps.new-app-info.outputs.app_version }}
        body: Autogenerated by git_ops release.
